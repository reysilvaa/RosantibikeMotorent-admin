name: Admin Frontend CI/CD

on:
  push:
    branches: [main, master, development]
  pull_request:
    branches: [main, master, development]

jobs:
  build-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - uses: actions/checkout@v4
      
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          
      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 8
          
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT
          
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint Check
        run: pnpm lint || echo "Linting issues found"

      - name: Build
        run: pnpm build
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}

      - name: Create deployment package
        run: |
          mkdir -p deployment
          cp -r .next deployment/
          cp -r public deployment/ || true
          cp package.json deployment/
          cp pnpm-lock.yaml deployment/
          cp next.config.ts deployment/
          tar -czf deployment.tar.gz deployment
          
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: admin-frontend-build
          path: deployment.tar.gz
          retention-days: 1
          
  deploy:
    needs: build-test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    runs-on: ubuntu-latest
    
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: admin-frontend-build

      - name: Deploy to production
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "deployment.tar.gz"
          target: "/tmp"

      - name: Setup deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            rm -rf /var/www/rosantibike/admin-deploy-temp || true
            mkdir -p /var/www/rosantibike/admin-deploy-temp
            tar -xzf /tmp/deployment.tar.gz -C /var/www/rosantibike/admin-deploy-temp
            cd /var/www/rosantibike/admin-deploy-temp/deployment
            pnpm install --prod
            
            # Backup current version and swap with new version
            if [ -d "/var/www/rosantibike/admin" ]; then
              mv /var/www/rosantibike/admin /var/www/rosantibike/backups/admin-backup-$(date +%Y%m%d%H%M%S)
            fi
            
            mkdir -p /var/www/rosantibike/admin
            cp -r ./* /var/www/rosantibike/admin/
            
            # Restart service
            pm2 restart admin-frontend